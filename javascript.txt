//variables
la variable se puede declarar, inicializar y modificar al lo largo del tiempo

-tipos de dato: String. Number,Boolean
-Casos especiales de datos: Undefined, null, Nan 
	Undefined:nos indica q es tu tipo de variable q existe pero no tiene valor(falta inicializar)
	null: q una variable tenga el valor de vacio(si esta definida) --Let numero=null
	Nan: no es un numero (hacer una operacion con algo q no es un numero)
-Declarar una varible: var ,let,const
.Declarar e Inicializar
	Let numero=15 --- alcance regional 
	const nombre="yas" --siempre va hacer esa varible nunca cambia(nose puede volver a inicializar),no cambia su valor
	esta varible se declara e inicilaiza en una misma linea (sino vota error)
//funciones
prompt: es una funcion q nos va a devolver un valor
	Let nombre= prompt("cual es tu nombre") --- nombre lo utilizamos cuantas veces queramos

//operadores
-operadores aritmeticos
-operadores de asignacion

//concatenacion
unir dos string 
-Con el signo + 
-Pra numeros forzamos string (""+9+8....)
-Con concat  num1.concat(num2)
-con backtiks y la variable ${} -- frase =`soy ${nombre} estoy caminando`
//operadores
-operadores de comparacion
	a==b -> comparan ssi son iguales y devuelven un valor( true o false)
	a!=b -> comparan ssi son diferentes  
	a===b - comparan q sea estrictemente identicos (mismo tipo de dato, valor)
	a!==b - comparan q sea estrictemente diferentes (mismo tipo de dato, valor)
	
-operadores logicos
 a&&b - basta q una sea f todo es false
 a||b -> basta q uno sea verdadero todo es verdad
  !a  -> negacion me devuelve lo contrario(solo funciona con true o false)
/// camel case
 es como trabaja java script primera palabrs en minusculas y las q siguen con mayuscula

// array
se guarda una varible como un doto
frutas=[1,2,3,"banana"]
//arrays asociativas 
se parecen al formato json
pc={
 nombre:"destock",
 procesador:"core i5"
 .
 .
}

//bucles
se repiten constantemente
	- setencia while
	 primero la condicion y de ahi la ejecutamos (de nuevo vuelve a preguntar)
		while(){}
	- setencia dowhile
	  primero   hago lo q quiero q se haga y luego se pregunta
		do{....}	
	-sentencia break
		break ----es para dejar de ejecutar la iteracion

	- setencia for
	 se ejecutan las veces que le indicamos(declaramos e inicializamos , condicion, aumento odisminucion)
 		 for(let i=0; i<6;i++){}
	-sentencia continue
		continue;-- es para omitir algo ya sea 

	- setencia for in
	 Nos muestra la posicion de los elementos (indice)
		for( variable in arrays ){}
	-sentencia for of
	 noa muestra los valores de esos elementos
		for(variable of arrays)
	-sentencia label
	 Es una sentencia que nos ayuda a asociar cualquier bucle a un nombre para terminarlo cuando queramos
		forRancio:
		for(){
		break forRancio;
		}


//funcionees
nos ahorra codigo
function nombreFuncion(){}
	-return
	 nos devuelve un valor y finaliza la funcion
	-parametros
	 son aquellos valores que pide nuestra funcion
	-funcion flecha
	const revisar=(nombre)=>{document.write(`como estas ${nombre} `)}
	revisar(sal);

//metodos de cadena

	- concat()junta dos o mas cadenas y retorna una nueva
	- startswith() - si una cadena comienza con los caracteres de otrs cadena, devuelve true, sino devuelve false    
	- endswith() - si una cadena termina con los caracteres de otra cadena,devuelve true, sino devuelve false
	- includes() - si una cadena puede encontrarse dentro otra cadena, devuelve true,sino devuelve false
	- indexOf() -devuelve el indice del primer caracter de la cadena, si no existe, devuelve -1
	-lastIndexOf() -devuelve el ultimo indice del primer caracter de la cadena, si no existe, devuelve -1
	
	-padStart() [propuesta  de Estandar]- rellenar la cadena al aprimcipio con los caracteres deseados
	-padEnd()[propuesta de ECMA]-Rellenar cadena al final con los caracteres deseados.
	-repeat()-devuelve la misma cadenapero repetida la cantidad que le indiquemos

	- split() - divide la cadena como le pidamos
	- substring() - nos retorna un pedazo de la cadena que  seleccionamos
	- toLowerCase() - convierte una cadena a minuscula 
	- toUpperCase() - convierte una cadena a mayuscula
	- toString() - metodo devuelve una cadena que representa al objeto especificado
	- trim() -elimina los espacios en blanco al principio y al final de la cadena 
	- trimEnd() -elimina los espacios en blanco al final de la cadena
	- trimStart(9 - elimina los espcios en blanco al comienzo de la cadena 
	- valueOf() - retorna el valor primitivode uun objeto string

//metodos de ARRAYS  	

	__________transformadores_____________
	-pop() -elimina el ultimo elemento de un array y lo devuelve

	-shift() -elimina el primer elemento de un array y lo devuelve
	-push() -agrega un elemento al array al final de la lista
	-reverse() -invierte el orden de los elementos de un array
	-unshift() -agrega uno o mas elementos al inicio del array y devuelve la nueva longitud del array
	-sort() -ordena los elementos de un arreglo (array) localmente y devuelve el arreglo ordenado.
	-splice() -cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos

	_________Accesores______
	-join() -une todos los elementos de una matriz(u objeto similar) en una cadena y la devuelve
	-slice() -devuelve una parte del array dentro de un nuevo array empezando por inicio hasta fin (fin no incluido)

	_______De repeticion______
	-filter() -crea un nuevo array con todos los elementos que cumpla la condicion
	-forEach() -ejecuta la funcion indicada una vez por cada elemento del array.  
	 
//objeto math
	_____metodos____
	- sqrt() -devuelve la raiz cuadrada positiva de un numero
	-cbrt() -devuelve la raiz cubica
	-max() -devuelve el mayor de cero o mas numeros
	-min() -devuelve el maspequeño de cero o mas numeros 
	-random() -devuelve un numero pseudo-aleatorio entre 0 y 1
	-round() -devuelve el volor de un numero redondeado al numero entero mas cercano
	-fround() -devuelve la representacion flotante de presicion simple mas cercana de un numero 
	-floor() -devuelve el mayor entero menor que o igual a un numero
	-trunc() -devuelve la parte entera del numero x,la eliminacion de los digitos fraccionarios

	-PI -3.1415
	-SQRT_2 -raiz cuadrada de 1/2; equivalentemente , 1 sobrela raiz 
	-SQRT2 -RAIZ cuadrada de 2, aproximadamente 1.414

	-E - constante de euler, 
	-LN2 -logaritmo natural de 2,aprox. 0.693
	-LN10 -Logaritmo natural de 10.aprox. 2.303
	-LOG2E -Logaritmo de E con base 2, aprox. 1.443
	-LOG10E -Logaritmo de E con base 10, aprox. 0.434
-----------herramientas para el desarrollador
//console

	clear()- limpia la consola  ++++ console.clear()
 	error()- muestra un mensaje de error en la consola   
	info()- emite unh mensaje informativo
	log() -muestra un mensaje en la consola web
	table()- esta funcion toma un argumento obligatorio: data, debe ser un array o un objeto  
	 
//funciones de conteo
	- count() -Registra el numero de veces que se llama a count(). esta funcion toma como ARGUMENTO OPCIONALuna etiqueta
	- countReset() -Resetea el contador ***console.count()***
	
//funciones de agrupacion
	-group() -Crea un nuevo grupo en linea en el registro de la consola(abierto)
	-grupEnd() -Remueve un grupo en linea en el registro de la consola
	-groupCollapsed() -Crea un grupo en linea pero , (cerrado)
//funciones de temporizacion
	- time() -inia un temporizador
	- timeEnd() -Registra el valor actual de un temporizador
	-timeLog() -Detiene   EL TEMPORIza

----DOM
//Metodos de seleccion  de elementos
	
	-getElementById() - Selecciona un elemento por ID 
	-getElementByTagName() - Selecciona todos los elementos que coincidan con el nombre de la etiqueta especifica
	-querySelector() - Devuelve el primer elemento que coincida con el grupo especificado de selectores
	-querySelectorAll() - Devuelve todos los elementos que coincidan con el grupo especificado de selectores

// Metodoos para definir, Obtener Y Eliminar valores de atributos
	- setAttribute() - Modificar el valor de un atributo  .setAttribute("type","text")
	- getAttribute() - Obtine el valor de un atributo     .getAttribute("type")
	- removeAttribute() - Remueve el valor de un atributo  .removeAttribute("type")

//atributos globales

	- contentEditable - indica si el elemento puede ser modificable (bool) .setAttribute("contentEditable","false")
	- dir - indica la direccionalidad del texto     .setAttribute("dir","rtl") ---ltr
	- hidden - indica si el elemento aun no es , o ya no es , relevante  .setAttribute("hidden","false")
	- style - contine declaraciones de estilo css para seer aplicadas al elemento  
	- tabindex - indica si el elemento puede obtener un focus de input               .setAttribute("tabindex","3")
	- title - contiene un texto con informacion relacionada ala elemento al que pertenece   .setAttribute("title","nuevo texto")

//  atributos inputs
	-className  input.className
	-value      input.value
	-type       input.type="text"
	-accept      input.accept= "image/gif" para imagen aceptar
	-form         form="nombre del id de form"
	-minLengeth  input.minLengeth="20"
	-placeholder
	-required

// Clases, classList y metodos

	- add() - añade una clase         .classList.add("titulo")
	- remove() - remueve una clase
	- item() - devuelve la clase del indice especificado  .classList.item(1)
	- contains() - verifica si ese elemento posee o no, la clase especificada    .classList.contains("titulo")
	- replace() - reemplaza una clase por otra
	- toggle() - si no tiene la clase especificada, la agrega, si ya la tiene, la elimina

//Obtencion y Modificacion de Elementos 

	- textContent - devuelve el texto de cualquier nodo  .textContent
	- innerText - devuelve el texto vsible de un node element
	- outerText - devuelve el texto que de las etiquetas html incluidas las etiquetas -- ya nose usa 

	- innerHTML - devuelve el contenido html de un elemento
	- outerHTML - devuelve el codigo html completo del elemento

//Creacion de elementos 

	- createElements() - se crea elementos 
	- createTextNode() - escribe el texto de cualquier elemento
	- appenChild() -  agrega cualquier elemento dentro de un elemento padre
	- createDocumentFragment() - para agregar de 2 a mas elementos    document.createDocumentFragment() 

// Obtencion y modificacion de childs (Hijos)

	- firstChild   - muestra el primer hijo del padre (sin dejar espacio)
	- lastChild    - muestra el ultimo hijo  .lastChild
	- firstElementChild -el primer elemento hijo
	- lastElementChild   - el ultimo elemento hijo
	- childNodes         - todos los nodos hijos sin dejar espacio
	- children           - coleccion de todos los nodos

//metodos childs (hijos)
	
	- replaceChild()  - reemplaza el contenido del  elemento hijo por otro
	- removeChild()   - elimina un hijo de un contenedor o padre
	- hasChildNodes()  - verifica si tiene hijos 

// propiedades parents (padres)

	-parentElement  - selelciona el padre el elemento de un elemento
	- parent Node - elegir el padre de un elemente

//propiedades de siblings (hermanos)
	
	-nextSibling   - selecciona el siguiente elemento hermanos
	-previousSibling - selecciona el anterior elemento
	-nextElementSibling
	-previousElementsSibling
 //nodos 
	-closest() - el elemento ascendente mas cercano